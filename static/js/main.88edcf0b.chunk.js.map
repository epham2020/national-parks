{"version":3,"sources":["components/Navigation.jsx","components/Footer.jsx","components/Home.jsx","components/Parks.jsx","components/Activities.jsx","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","className","class","style","to","src","width","height","alt","location","pathname","Footer","target","Home","updateFunc","a","imgDict","titleDict","captionDict","fetch","webcams","json","l","camData","data","m","relatedParks","images","designation","length","fullName","push","url","title","caption","titList","capList","keyList","imgList","Object","keys","titleList","captionList","Parks","getParks","setState","state","selectedPark","getImages","bind","e","value","this","imgURL","indTitle","indCaption","document","getElementById","innerHTML","i","image","Image","appendChild","newTitleBold","createElement","newTitle","createTextNode","newCaption","empty","newLine","padding","color","name","id","onChange","map","val","React","Component","response","datas","activToNameDict","activToCodeDict","j","fullNameArray","parkCodeArray","parks","parkCode","activArray","n","activ","v","type","onclick","getList","getInformation","button","buttonVal","urlLink","k","description","latLong","activities","states","contacts","operatingHours","arrayActivities","o","mapPhones","phoneNumbers","phoneNumber","p","emailAdd","emailAddresses","emailAddress","g","hours","standardHours","indImage","imageArray","titleArray","captionArray","join","z","newImage","br","Activities","getActivities","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.88edcf0b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Navigation(props) {\n  return (\n    <div className=\"navigation\">\n      {/* navigation bar is green */}\n      <nav class=\"navbar navbar-expand navbar-dark\" style={{\"background-color\": \"#228b22\"}}>\n        <div class=\"container\">\n          {/* NPS logo and name that returns to home page when clicked */}\n          <Link class=\"navbar-brand\" to=\"/national-parks\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1d/US-NationalParkService-Logo.svg/1200px-US-NationalParkService-Logo.svg.png\" width=\"40\" height=\"auto\" alt=\"\"></img>\n            &nbsp;&nbsp;&nbsp;National Park Service\n          </Link>\n          <div>\n            <ul class=\"navbar-nav ml-auto\">\n              {/* creates Home text on navigation that directs to Home when clicked */}\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/national-parks\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/national-parks\">\n                  Home\n                  <span class=\"sr-only\">(current)</span>\n                </Link>\n              </li>\n              {/* creates Parks text on navigation that directs to Parks when clicked */}\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/national-parks/parks\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/national-parks/parks\">\n                  Parks\n                </Link>\n              </li>\n              {/* creates Activities text on navigation that directs to Activities when clicked */}\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/national-parks/activities\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/national-parks/activities\">\n                  Activities\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default withRouter(Navigation);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      {/* footer is light gray */}\n      <footer class=\"py-5 fixed-bottom\" style={{\"background-color\": \"#BEBEBE\"}}>\n        <div class=\"container d-flex justify-content-around\">\n\n          {/* Instagram icon and link to NPS Instagram */}\n          <Link to={{ pathname: \"https://www.instagram.com/nationalparkservice/\" }} target=\"_blank\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Instagram_icon.png/1024px-Instagram_icon.png\" width=\"50\" height=\"auto\" alt=\"\"></img>\n          </Link>\n\n          {/* Facebook icon and link to NPS Facebook */}\n          <Link to={{ pathname: \"https://www.facebook.com/nationalparkservice/\" }} target=\"_blank\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Facebook_icon_2013.svg/1200px-Facebook_icon_2013.svg.png\" width=\"50\" height=\"auto\" alt=\"\"></img>\n          </Link>\n\n          {/* Twitter icon and link to NPS Twitter */}\n          <Link to={{ pathname: \"https://twitter.com/NatlParkService?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\" }} target=\"_blank\">\n            <img src=\"https://bankimooncentre.org/wp-content/uploads/2020/05/twitter-icon-square-logo-108D17D373-seeklogo.com_.png\" width=\"50\" height=\"auto\" alt=\"\"></img>\n          </Link>\n\n          {/* YouTube icon and link to NPS YouTube */}\n          <Link to={{ pathname: \"https://www.youtube.com/nationalparkservice\" }} target=\"_blank\">\n            <img src=\"https://cdn0.iconfinder.com/data/icons/web-social-and-folder-icons/512/YouTube.png\" width=\"50\" height=\"auto\" alt=\"\"></img>\n          </Link>\n          \n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;","import React from \"react\";\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <div class=\"container\">\n        {/* top row that contains a picture on the left and tab header with small description on right */}\n        <div class=\"row align-items-center my-5\">\n          {/* left column contains a picture with caption underneath */}\n          <div class=\"col-lg-7\">\n            <img\n              class=\"img-fluid rounded mb-4 mb-lg-0\"\n              src=\"https://communityengagement.utk.edu/wp-content/uploads/sites/95/2085/03/900x400-mountain.jpg\"\n              alt=\"\"\n            />\n            <figcaption>Great Smoky Mountains</figcaption>\n          </div>\n          {/* right column contains tab header with small description underneath */}\n          <div class=\"col-lg-5\">\n            <h1 class=\"font-weight-light\">Find Your Adventure</h1>\n            <p>\n            The National Park Service preserves unimpaired the natural and cultural resources and values of the National Park System \n            for the enjoyment, education, and inspiration of this and future generations. The Park Service cooperates with partners \n            to extend the benefits of natural and cultural resource conservation and outdoor recreation throughout this country and the world.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","import React from \"react\";\n\n/**\n * getParks fetches webcam data from the NPS API, creating a mapping of park name to image url, caption, and title\n * \n * @param {*} updateFunc updates state of React component\n */\nasync function getParks(updateFunc) {\n\n  //initialize image, title, and caption mappings\n  var imgDict = {};\n  var titleDict = {};\n  var captionDict = {};\n\n  //fetches and only pulls API data that is needed\n  const webcams = await fetch('https://developer.nps.gov/api/v1/webcams?limit=192&api_key=ZXXr1uUYZgQP6dKgYSEcuW71p5YxXU1f3ioeYPtW');\n  const camData = await webcams.json();\n  for (var l in camData.data){\n    const { relatedParks, images } = camData.data[l];\n    for (var m in relatedParks){\n      //only pull images that correspond to national parks\n      if (relatedParks[m].designation === \"National Park\"){\n        if (images.length > 0){\n          //if national park has not been iterated over before, create new key with value as a list in mappings\n          if (!(relatedParks[m].fullName in imgDict)){\n            var keyList = [];\n            var titList = [];\n            var capList = [];\n\n            keyList.push(images[0].url);\n            titList.push(images[0].title);\n            capList.push(images[0].caption);\n\n            imgDict[relatedParks[m].fullName] = keyList;\n            titleDict[relatedParks[m].fullName] = titList;\n            captionDict[relatedParks[m].fullName] = capList;\n          }\n\n          //if national npark has been iterated over before, add data to corresponding list\n          else{\n            imgDict[relatedParks[m].fullName].push(images[0].url)\n            titleDict[relatedParks[m].fullName].push(images[0].title)\n            captionDict[relatedParks[m].fullName].push(images[0].caption)\n          }\n        }\n      }\n    }\n  }\n  \n  //create keys list for each data set for easy accessing\n  var imgList = Object.keys(imgDict);\n  var titleList = Object.keys(titleDict);\n  var captionList = Object.keys(captionDict);\n\n  updateFunc(imgDict, imgList, titleDict, titleList, captionDict, captionList);\n}\n\n/**\n * class that creates React component for the image URL, title and caption data\n */\nclass Parks extends React.Component {\n  \n  constructor() {\n\n    super();\n    getParks((imgDict, imgList, titleDict, titleList, captionDict, captionList) => {\n      this.setState({\n        imgDict:imgDict,\n        imgList: imgList,\n        titleDict: titleDict,\n        titleList: titleList,\n        captionDict: captionDict,\n        captionList: captionList\n      })\n    });\n\n    this.state = {\n      imgDict: {},\n      imgList: [],\n      titleDict: {},\n      titleList: [],\n      captionDict: {},\n      captionList: [],\n      selectedPark: null,\n    };\n    \n    //call getImages with image, title, caption data\n    this.getImages = this.getImages.bind(this);\n  }\n\n/**\n * getImages displays each image corresponding to the national park with a title and caption\n * beneath it\n * \n * @param {*} e encapsulates URL, title, caption data\n */\ngetImages(e) {\n\n    if (!(e && e.target && e.target.value && this.state && this.state.imgDict)) {\n      return;\n    }\n\n    var imgURL = this.state.imgDict[e.target.value]\n    var indTitle = this.state.titleDict[e.target.value]\n    var indCaption = this.state.captionDict[e.target.value]\n\n    //resets display each time called\n    document.getElementById('lst').innerHTML = \"\";\n  \n    //for each image\n    for (var i=0; i<imgURL.length;i++){\n\n      //add image to element\n      var image = new Image(700,300);\n      image.src = imgURL[i];\n      image.style = \"margin-left: 15px; margin-bottom: 15px\";\n      document.getElementById('lst').appendChild(image);\n\n      //add bolded title to element\n      var newTitleBold = document.createElement('strong');\n      var newTitle = document.createTextNode(indTitle[i] + \": \");\n      newTitleBold.appendChild(newTitle);\n      document.getElementById('lst').appendChild(newTitleBold);\n\n      //add caption to element\n      var newCaption = document.createTextNode(indCaption[i]);\n      document.getElementById('lst').appendChild(newCaption);\n  \n      //add line breaks to element\n      var empty = document.createElement(\"pre\");\n      var newLine = document.createTextNode('\\n\\n\\n');\n      empty.appendChild(newLine);\n      document.getElementById('lst').appendChild(empty);\n    }\n  }\n\n  render() {\n    \n    let selectedPark;\n\n      return (\n        <div className=\"parks\">\n          <div class=\"container\">\n            {/* top row that contains a picture on the left and tab header with small description on right */}\n            <div class=\"row align-items-center my-5\">\n              <div class=\"col-lg-7\">\n                {/* image on left with caption underneath */}\n                <img\n                  class=\"img-fluid rounded mb-4 mb-lg-0\"\n                  src=\"https://bluemountainbb.com/wp-content/uploads/2020/08/bigstock-Logan-pass-8194883-900x400.jpg\"\n                  alt=\"\"\n                />\n                <figcaption>Glacier National Park</figcaption>\n    \n              </div>\n              {/* tab header + description to the right of the image */}\n              <div class=\"col-lg-5\" style={{padding: 0}}>\n                <h1 class=\"font-weight-light\">Parks</h1>\n                <p>\n                  Explore the unique nature, recreation, history, and culture of our parks\n                </p>\n              </div>\n            </div>\n            {/* row cotains instruction header, and a drop down menu */}\n            <div class=\"row align-items-center my-5\" style={{padding: 0}}>\n              <p style={{'fontSize': '25px', color: '#8bc34a', 'fontFamily': 'Rockwell'}}>\n                <u style={{color: '#b66611'}}>Click from available National Parks to view non streaming webcam photos</u><br />\n              </p>\n              <select name=\"parks\" id=\"parksDropdown\" value={selectedPark} onChange={this.getImages}>\n                  {this.state.imgList.map((val) => {\n                      return <option value={val}>{val}</option>;\n                  })}\n              </select>\n\n            </div>\n            <div class=\"row align-items-center my-5\">\n              <div class=\"col-lg-5\" style={{padding: 0}}>\n              <p style={{'fontSize': '25px', color: '#8bc34a', 'fontFamily': 'Rockwell'}}>\n                <u style={{color: '#b66611'}}>Images</u><br />\n              </p>\n                <p>\n                  {/* obtains the images, along with their caption and title */}\n                  <span id=\"lst\"></span><br /><br />\n                </p>\n              </div>\n            </div>\n            {/* empty row so footer does not cover up text */}\n            <div class=\"row align-items-center my-5\">\n              <p>\n                <br /><br /><br /><br />\n              </p>\n            </div>       \n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default Parks;","import React from \"react\";\n\n/**\n * getActivities fetches data from the NPS API, creating a mapping of activities to national parks that have that activity,\n * and creating buttons corresponding to activity names\n */\nasync function getActivities() {\n\n  //fetch activity data from NPS API\n  const response = await fetch('https://developer.nps.gov/api/v1/activities/parks?api_key=ZXXr1uUYZgQP6dKgYSEcuW71p5YxXU1f3ioeYPtW');\n  const datas = await response.json();\n  const { data } = datas;\n\n  //map that maps the activity to a list of national park names\n  var activToNameDict = {};\n\n  //map that maps the activity to a list of national park codes\n  var activToCodeDict = {};\n\n  for (var i in data){\n    var fullNameArray = [];\n    var parkCodeArray = [];\n\n    //for each activity, add the fullName to fullNameArray and parkCode to parkCode array only if a National Park designation\n    const { parks } = data[i];\n    for (var j in parks){\n      if (parks[j].designation === \"National Park\"){\n        fullNameArray.push(parks[j].fullName);\n        parkCodeArray.push(parks[j].parkCode);\n      }\n    }\n    activToNameDict[data[i].name] = fullNameArray;\n    activToCodeDict[data[i].name] = parkCodeArray;\n  }\n\n  //create a list of the keys to iterate over\n  var activArray = Object.keys(activToNameDict);\n \n  //for each activity, create a button\n  for (let n=0;n<activArray.length;n++) {  \n   let activ = activArray[n];\n   var v = document.createElement('input');\n   v.type=\"button\";\n   v.value=activ;\n   v.style=\"margin-left: 15px; margin-bottom: 15px; padding: 15px; background: #d6c0a8\";\n\n   //On click, pulls up the list of buttons of national parks that has that activity\n   v.onclick = function () {getList(activToNameDict, activToCodeDict, activ)};\n   document.getElementById('acts').appendChild(v);\n  }\n}\n\n\n/**\n * getList returns for the activity that was clicked, a series of buttons of national parks that have that\n * activity\n * \n * @param {*} activToNameDict a mapping that maps an activity string to a list of full names of national parks\n * @param {*} activToCodeDict a mapping that maps an activity string to a list of park codes of national parks\n * @param {*} activ the activity whose corresponding button is clicked\n */\nfunction getList(activToNameDict, activToCodeDict, activ) {\n\n  //reset list of national parks each time an activity is clicked\n  document.getElementById('list').innerHTML = \"\";\n\n  //create a button for each national park that is under that activity\n  for (let n=0;n<activToNameDict[activ].length;n++){\n    var a = document.createElement('input');\n    a.type=\"button\";\n    a.value=activToNameDict[activ][n];\n    a.style=\"margin-left: 15px; margin-bottom: 15px; padding: 15px; background: #d6c0a8\";\n\n    //On click of national park button, pulls up an informationanl page about that national park\n    //input of park code\n    a.onclick = function () {getInformation(this, activToCodeDict[activ][n])};\n    document.getElementById('list').appendChild(a);  \n  }\n\n  //header for list of national parks that offer clicked activity\n  document.getElementById('indAct').innerHTML = activ + \": offered at the following U.S. National Parks\";\n}\n\n\n/**\n * getInformation returns for the national park button that was clicked,\n * an informational page about the park including a description, operating hours,\n * contact, and images\n * \n * @param {*} button information about the national park button object that was clicked\n * @param {*} parkCode the park code corresponding to the national park button that was clicked\n */\nasync function getInformation(button, parkCode) {\n\n  //header for informational page\n  var buttonVal = button.value;\n  document.getElementById('infoTitle').innerHTML = \"Information about \" + buttonVal;\n\n  //fetches park data from NPS API for national park corresponnding to parkCode\n  var urlLink = 'https://developer.nps.gov/api/v1/parks?parkCode=' + parkCode + '&api_key=ZXXr1uUYZgQP6dKgYSEcuW71p5YxXU1f3ioeYPtW';\n  const response = await fetch(urlLink);\n  const datas = await response.json();\n  const { data } = datas;\n\n  const { url, fullName, description, latLong, activities, states, contacts, operatingHours, images } = data[0];\n\n  //fetches activities corresponding to national park that was clicked\n  var arrayActivities = []\n  for (var k in activities){\n    arrayActivities.push(activities[k].name + \"</br>\");\n  }\n\n  //fetches phone numbers corresponding to national park that was clicked\n  var mapPhones = [];\n  for (var o in contacts.phoneNumbers){\n    mapPhones.push(contacts.phoneNumbers[o].type + \": \" + contacts.phoneNumbers[o].phoneNumber + \"</br>\");\n  }\n\n  //fetches email addresses corresponding to national park that was clicked\n  var emailAdd = [];\n  for (var p in contacts.emailAddresses){\n    emailAdd.push(contacts.emailAddresses[p].emailAddress + \"</br>\");\n  }\n\n  //fetches operating hours corresponding to national park that was clicked\n  var hours = [];\n  for (var g in operatingHours[0].standardHours){\n    hours.push(g + \": \" + operatingHours[0].standardHours[g] + \"</br>\");\n  }\n\n  //fetches images corresponding to national park that was clicked\n  var imageArray = [];\n  var titleArray = [];\n  var captionArray = [];\n  for (var indImage in images){\n    imageArray.push(images[indImage].url);\n    titleArray.push(images[indImage].title);\n    captionArray.push(images[indImage].caption);\n  }\n\n  //links element to HTML display\n  document.getElementById('url').innerHTML = \"<b>Link</b>:</br> \" + url;\n  document.getElementById('fullName').innerHTML = \"<b>Name</b>: \" + fullName;\n  document.getElementById('states').innerHTML = \"<b>State</b>: \" + states;\n  document.getElementById('description').innerHTML = \"<b>Description</b>: \" + description;\n  document.getElementById('latLong').innerHTML = \"<b>Coordinates</b>:</br> \" + latLong;\n  document.getElementById('activities').innerHTML = \"<b>Activities</b>:</br> \" + arrayActivities.join(' ');\n  document.getElementById('phone').innerHTML = \"<b>Phone</b>:</br> \" + mapPhones.join(' ');\n  document.getElementById('email').innerHTML = \"<b>Email</b>:</br> \" + emailAdd.join(' ');\n  document.getElementById('hours').innerHTML = \"<b>Hours</b>:</br> \" + hours.join(' ');\n\n  //Links image, title, caption element to display\n  document.getElementById('image').innerHTML = \"\";\n\n  for (var z=0; z<imageArray.length;z++){\n      //appends image to element\n    var newImage = new Image(1237, 696);\n    newImage.src = imageArray[z];\n    newImage.style = \"margin-left: 15px; margin-bottom: 15px\";\n    document.getElementById('image').appendChild(newImage);\n\n    //appends bolded title to element\n    var newTitleBold = document.createElement('strong');\n    var newTitle = document.createTextNode(titleArray[z] + \": \");\n    newTitleBold.appendChild(newTitle);\n    document.getElementById('image').appendChild(newTitleBold);\n\n    //appends caption to element\n    var newCaption = document.createTextNode(captionArray[z]);\n    document.getElementById('image').appendChild(newCaption);\n\n    var br = document.createElement(\"br\");\n    document.getElementById('image').appendChild(br);\n\n    //appends line breaks to element\n    var empty = document.createElement(\"pre\");\n    var newLine = document.createTextNode('\\n\\n\\n');\n    empty.appendChild(newLine);\n    document.getElementById('image').appendChild(empty);\n\n  }\n\n}\n\n\nfunction Activities() {\n\n  getActivities();\n\n  return (\n    <div className=\"activities\">\n      <div class=\"container\">\n        {/* top row that contains a picture on the left and tab header with small description on right */}\n        <div class=\"row align-items-center my-5\">\n          <div class=\"col-lg-7\">\n            {/* image on the left */}\n            <img\n              class=\"img-fluid rounded mb-4 mb-lg-0\"\n              src=\"https://www.antilogvacations.com/Images/Home/Subdestinations/International/International-Alaska-GlacierBayNationalPark.jpg\"\n              alt=\"\"\n            />\n          </div>\n          {/* tab header with small description on right */}\n          <div class=\"col-lg-5\">\n            <h1 class=\"font-weight-light\">Activities</h1>\n            <p>\n              Find out which parks offer our wide range of activities\n            </p>\n          </div>\n        </div>\n        {/* next row that contains text instructions, as well as activity  buttons */}\n        <div class=\"row align-items-center my-5\">\n          <p>\n            <p style={{'fontSize': '25px', color: '#8bc34a', 'fontFamily': 'Rockwell'}}>\n              <u style={{color: '#8bc34a'}}>Click an activity to find out which parks offer it</u><br />\n            </p>\n            {/* adds activity buttons to the web page */}\n            <span id=\"acts\"></span><br /><br />\n            <u style={{color: '#8bc34a'}}><span style={{'fontSize': '25px', color: '#8bc34a', 'fontFamily': 'Rockwell'}} id=\"indAct\"></span></u><br /><br />\n            {/* adds list of national park buttons when activity clicked */}\n            <span id=\"list\"></span><br />\n          </p>\n        </div>\n        {/* this row pulls up the informational page about a national park when it is clicked */}\n        <div class=\"row align-items-center my-5\">\n          <p>\n            <p style={{'text-align': 'center'}}>\n              <u style={{color: '#8bc34a'}}><span style={{'fontSize': '35px', color: '#8bc34a', 'fontFamily': 'Rockwell'}} id=\"infoTitle\"></span></u><br /><br />\n            </p>\n            <span id=\"fullName\"></span><br /><br />\n            <span id=\"states\"></span><br /><br />\n            <span id=\"description\"></span><br /><br />\n          </p>\n        </div> \n        {/* coordinates, url, and activities list in left column, phone, email, and hours in the right column */}\n        <div class=\"row align-items-baseline my-5\">\n          <div class=\"col-lg-7\">\n            <p>\n              <span id=\"latLong\"></span><br /><br />\n              <span id=\"url\"></span><br /><br />\n              <span id=\"activities\"></span><br /><br />\n            </p>\n          </div>\n          <div class=\"col-lg-5\">\n            <p>\n              <span id=\"phone\"></span><br /><br />\n              <span id=\"email\"></span><br /><br />\n              <span id=\"hours\"></span><br /><br />\n            </p>\n          </div>\n        </div>\n        {/* bottom row displays image, title, caption elements */}\n        <div class=\"row align-items-center my-5\">\n          <p>\n            <span id=\"image\"></span><br /><br />\n          </p>\n        </div>\n        {/* empty space so footer doesn't cover text */}\n        <div class=\"row align-items-center my-5\">\n          <p>\n            <br /><br /><br /><br />\n          </p>\n        </div>       \n      </div>\n    </div>\n  );\n}\n\nexport default Activities;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Navigation, Footer, Home, Parks, Activities } from \"./components\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route path=\"/national-parks\" exact component={() => <Home />} />\n          <Route path=\"/national-parks/parks\" exact component={() => <Parks />} />\n          <Route path=\"/national-parks/activities\" exact component={() => <Activities />} />\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}